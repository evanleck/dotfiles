[[language]]
name = "javascript"
shebangs = ["deno"]
roots = ["deno.json", "deno.jsonc"]
file-types = ["js"]
language-servers = ["deno-lsp"]
formatter = { command = "deno", args = ["fmt", "-", "--ext", "js"] }
auto-format = true

[[language]]
name = "typescript"
shebangs = ["deno"]
roots = ["deno.json", "deno.jsonc"]
file-types = ["ts"]
language-servers = ["deno-lsp"]
formatter = { command = "deno", args = ["fmt", "-", "--ext", "ts"] }
auto-format = true

[[language]]
name = "jsx"
shebangs = ["deno"]
roots = ["deno.json", "deno.jsonc"]
file-types = ["jsx"]
language-servers = ["deno-lsp"]
formatter = { command = "deno", args = ["fmt", "-", "--ext", "jsx"] }
auto-format = true

[[language]]
name = "tsx"
shebangs = ["deno"]
roots = ["deno.json", "deno.jsonc"]
file-types = ["tsx"]
language-servers = ["deno-lsp"]
formatter = { command = "deno", args = ["fmt", "-", "--ext", "tsx"] }
auto-format = true

[[language]]
name = "json"
formatter = { command = "deno", args = ["fmt", "-", "--ext", "json"] }

[[language]]
name = "markdown"
formatter = { command = "deno", args = ["fmt", "-", "--ext", "md"] }
auto-format = true

# If frontmatter is getting mangled by the above give this a try.
# [[language]]
# name = "markdown"
# formatter = { command = "deno", args = ["eval", 'import "npm:prettier@3/bin/prettier.cjs";', "--", "--prose-wrap", "always", "--parser", "markdown" ] }
# auto-format = true

[language-server.deno-lsp]
command = "deno"
args = ["lsp"]
environment = { NO_COLOR = "1" }

[language-server.deno-lsp.config.deno]
enable = true
# Uncomment to enable completion of unstable features of Deno
# unstable = true
# Uncomment to cache dependencies on save
# cacheOnSave = true
# Enable completion of importing from registries
# Enable completion of function calls
suggest = { completeFunctionCalls = false, imports = { hosts = { "https://deno.land" = true } } }
# suggest = { imports = { hosts = { "https://deno.land" = true, "https://crux.land" = true, "https://x.nest.land" = true } } }
# Uncomment to enable inlay hints
# inlayHints.parameterNames.enabled = "all"
# inlayHints.parameterTypes.enabled = true
# inlayHints.variableTypes.enabled = true
# inlayHints.propertyDeclarationTypes.enabled  = true
# inlayHints.functionLikeReturnTypes.enabled = true
# inlayHints.enumMemberValues.enabled = true
